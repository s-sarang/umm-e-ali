package com.ummeali.herbal.order;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.Builder;

import java.util.List;
import java.util.Objects;

@Table(name = "ORDER")
@Entity
@Builder
public class Order {

    public Order(){
        // NO-OPS - Required for Spring JPA
    }

    @Id @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Integer orderId; // Unique identifier for an order.
    private Integer basketId; // Basket of product and quantities.
    private Integer userId; // User associated with the order.
    private String deliveryAddressLine1;
    private String deliveryAddressLine2;
    private String deliveryAddressLine3;
    private String deliveryCountry;
    private String userNotes;
    private String status; // This is an admin managed field. Status of order, e.g. Accepted, Processing, On Hold, Dispatched, Out for Delivery, Delivered
    // Cancelled - customer has cancelled the order.
    // Accepted - order has been received by store.
    // Processing - order is being prepared as per items in basket.
    // On Hold - order has to be placed on hold for whatever reason e.g. customer wanting to cancel an order and would like to refund.
    // Dispatched - order has been given to the shipping provider.
    // Out for Delivery - shipping provider has the order package and is attempting to deliver.
    // Delivered - customer has received the order.
    @ElementCollection
    private List<String> statusUpdateReason; // This is an admin managed field.

    // IDE Autogenerated - Constructor, Getters, Setters, Equals, Hash Code And ToString


    public Order(Integer orderId, Integer basketId, Integer userId, String deliveryAddressLine1, String deliveryAddressLine2, String deliveryAddressLine3, String deliveryCountry, String userNotes, String status, List<String> statusUpdateReason) {
        this.orderId = orderId;
        this.basketId = basketId;
        this.userId = userId;
        this.deliveryAddressLine1 = deliveryAddressLine1;
        this.deliveryAddressLine2 = deliveryAddressLine2;
        this.deliveryAddressLine3 = deliveryAddressLine3;
        this.deliveryCountry = deliveryCountry;
        this.userNotes = userNotes;
        this.status = status;
        this.statusUpdateReason = statusUpdateReason;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public Integer getBasketId() {
        return basketId;
    }

    public void setBasketId(Integer basketId) {
        this.basketId = basketId;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getDeliveryAddressLine1() {
        return deliveryAddressLine1;
    }

    public void setDeliveryAddressLine1(String deliveryAddressLine1) {
        this.deliveryAddressLine1 = deliveryAddressLine1;
    }

    public String getDeliveryAddressLine2() {
        return deliveryAddressLine2;
    }

    public void setDeliveryAddressLine2(String deliveryAddressLine2) {
        this.deliveryAddressLine2 = deliveryAddressLine2;
    }

    public String getDeliveryAddressLine3() {
        return deliveryAddressLine3;
    }

    public void setDeliveryAddressLine3(String deliveryAddressLine3) {
        this.deliveryAddressLine3 = deliveryAddressLine3;
    }

    public String getDeliveryCountry() {
        return deliveryCountry;
    }

    public void setDeliveryCountry(String deliveryCountry) {
        this.deliveryCountry = deliveryCountry;
    }

    public String getUserNotes() {
        return userNotes;
    }

    public void setUserNotes(String userNotes) {
        this.userNotes = userNotes;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public List<String> getStatusUpdateReason() {
        return statusUpdateReason;
    }

    public void setStatusUpdateReason(List<String> statusUpdateReason) {
        this.statusUpdateReason = statusUpdateReason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Objects.equals(orderId, order.orderId) && Objects.equals(basketId, order.basketId) && Objects.equals(userId, order.userId) && Objects.equals(deliveryAddressLine1, order.deliveryAddressLine1) && Objects.equals(deliveryAddressLine2, order.deliveryAddressLine2) && Objects.equals(deliveryAddressLine3, order.deliveryAddressLine3) && Objects.equals(deliveryCountry, order.deliveryCountry) && Objects.equals(userNotes, order.userNotes) && Objects.equals(status, order.status) && Objects.equals(statusUpdateReason, order.statusUpdateReason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(orderId, basketId, userId, deliveryAddressLine1, deliveryAddressLine2, deliveryAddressLine3, deliveryCountry, userNotes, status, statusUpdateReason);
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", basketId=" + basketId +
                ", userId=" + userId +
                ", deliveryAddressLine1='" + deliveryAddressLine1 + '\'' +
                ", deliveryAddressLine2='" + deliveryAddressLine2 + '\'' +
                ", deliveryAddressLine3='" + deliveryAddressLine3 + '\'' +
                ", deliveryCountry='" + deliveryCountry + '\'' +
                ", userNotes='" + userNotes + '\'' +
                ", status='" + status + '\'' +
                ", statusUpdateReason=" + statusUpdateReason +
                '}';
    }
}
