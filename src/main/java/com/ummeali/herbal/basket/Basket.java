package com.ummeali.herbal.basket;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Builder;

import java.util.List;
import java.util.Objects;

@Table(name = "BASKET")
@Entity
@Builder
public class Basket {

    public Basket(){
        // NO-OPS - Required for Spring JPA
    }

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Integer basketId; // Unique identifier for a basket.
    private Integer customerId; // User associated with the basket.
    @OneToMany
    private List<ProductQuantity> productQuantity; // Product and quantity put in the basket by user.
    private String status; // Status of basket, e.g. Pending (which means the basket has yet to be checked out by user) or Paid (which means the basked is now closed and it is no longer modifiable).

    public Basket(Integer basketId, Integer customerId, List<ProductQuantity> productQuantity, String status) { // All argument constructor
        this.basketId = basketId;
        this.customerId = customerId;
        this.productQuantity = productQuantity;
        this.status = status;
    }

    // IDE Autogenerated - Getters, Setters, Equals, Hash Code And To String

    public Integer getBasketId() {
        return basketId;
    }

    public void setBasketId(Integer basketId) {
        this.basketId = basketId;
    }

    public Integer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Integer userId) {
        this.customerId = userId;
    }

    public List<ProductQuantity> getProductQuantity() {
        return productQuantity;
    }

    public void setProductQuantity(List<ProductQuantity> productQuantity) {
        this.productQuantity = productQuantity;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Basket basket = (Basket) o;
        return customerId == basket.customerId && Objects.equals(basketId, basket.basketId) && Objects.equals(productQuantity, basket.productQuantity) && Objects.equals(status, basket.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(basketId, customerId, productQuantity, status);
    }

    @Override
    public String toString() { // This is used to prInteger value of object fields rather than object reference when logging.
        return "Basket{" +
                "basketId=" + basketId +
                ", userId=" + customerId +
                ", productQuantity=" + productQuantity +
                ", status='" + status + '\'' +
                '}';
    }
}
